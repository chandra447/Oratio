# Dockerfile.chameleon
# Generic AgentCore Runtime Loader (Chameleon)
# Loads and executes dynamically generated Strands agents from S3

# Use ARM64-compatible Python base image for AgentCore
FROM --platform=linux/arm64 ghcr.io/astral-sh/uv:python3.12-bookworm-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy dependency files
COPY pyproject.toml ./

# Install Python dependencies using uv
# Install core Strands SDK
RUN uv pip install --system \
    strands-agents \
    bedrock-agentcore \
    boto3 \
    botocore

# Install Strands community tools package
RUN uv pip install --system \
    strands-tools


# Install observability (OTEL)
RUN uv pip install --system \
    opentelemetry-api \
    opentelemetry-sdk \
    opentelemetry-instrumentation \
    opentelemetry-instrumentation-fastapi \
    opentelemetry-exporter-otlp \
    aws-opentelemetry-distro

# Copy the generic loader
COPY generic_loader.py ./

# Expose port 8080 (required by AgentCore)
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/ping || exit 1

# Create non-root user for security
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
USER appuser

# Set environment variables
ENV PORT=8080
ENV PYTHONUNBUFFERED=1
ENV LOG_LEVEL=INFO

# Grant IAM permissions (configured via AgentCore execution role):
# - s3:GetObject on CODE_BUCKET (to fetch agent code)
# - bedrock:InvokeModel (for foundation model access)
# These are set in the AgentCore execution role, not in the container

# Run with OpenTelemetry instrumentation
CMD ["opentelemetry-instrument", "python", "generic_loader.py"]

